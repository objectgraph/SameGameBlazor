@page "/showdata"
@inject DataStore DataStore
<button class="btn btn-outline-primary" @onclick="Refresh">Refresh</button>
<button class="btn btn-outline-primary" @onclick="Reset">Reset</button>

<table class="table">
    @foreach(var key in DataStore.GlobalStore.Keys){
        <tr>
        <td>@key</td>
        <td><BoardView Width="100" Height="100" Rows="10" Cols="10" Colors="4" GameState=DataStore.GlobalStore[key]></BoardView></td>
        </tr>
    }

</table>

@code{
    protected void Refresh(){
        StateHasChanged();
    }
    protected void Reset(){
        foreach(var key in DataStore.GlobalStore.Keys){
            DataStore.GlobalStore.Remove(key);
        }
    }
    protected override void OnInitialized() {
        base.OnInitialized();
        DataStore.GlobalStore.PropertyChanged+= OnMyChangeHandler;
        DataStore.GlobalStore.CollectionChanged+= OnMyChangeHandler;
    }

    protected void Dispose(){
        DataStore.GlobalStore.PropertyChanged-= OnMyChangeHandler;
        DataStore.GlobalStore.CollectionChanged-= OnMyChangeHandler;
    }

    private async void OnMyChangeHandler(object sender, EventArgs e)
    {
        // InvokeAsync is inherited, it syncs the call back to the render thread
        await InvokeAsync(() => {
            StateHasChanged();
        });
    }
}