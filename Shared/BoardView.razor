@inject DataStore DataStore
<div class="board">
    @if(ShowStats){
        <div class="row">
            <div class="col-md-4">
                Score: @GameState.Score
            </div>
            <div class="col-md-4">
                Selection: @GameState.CurrentSelection
            </div>
            <div class="col-md-4">
                GameOver: @GameState.GameOver
            </div>
        </div>
    }
    <div class="row">
        <div class="col">
        <svg width="@Width" height="@Height">
        @for(int i=0;i<GameState.Rows;i++){
            @for(int j=0;j<GameState.Cols;j++){
            var obj = GameState.Data[i,j];
                <g transform="translate(@(j*cellWidth),@(i*cellWidth))">
                <rect x=0 y=0 width="@cellWidth" height="@cellWidth" fill="white" @onclick="()=>Action(obj)"></rect>
                @if(!obj.Deleted){
                    @if(obj.Selected){
                        <rect x=0 y=0 width="@cellWidth" height="@cellWidth" fill="grey" @onclick="()=>Action(obj)"></rect>
                    }
                    <circle cx="@(cellWidth/2)" cy="@(cellWidth/2)" r="@(cellWidth/2-2)" fill="@obj.Color" @onclick="()=>Action(obj)"></circle>
                }
                @* <text x="@(cellWidth/2)" y="@(cellWidth/2)">(@obj.Row,@obj.Col)</text> *@
                </g>
            }
        }
        </svg>
        </div>
    </div>
</div>
@code{
    [Parameter] public int Width{get;set;}=500;
    [Parameter] public int Height{get;set;}=500;
    [Parameter] public GameState GameState{get;set;}
    [Parameter] public Action<Cell> ActionMethod{get;set;}
    [Parameter] public bool ShowStats{get;set;}=true;

    int cellWidth = 0;
    protected override void OnInitialized() {
        base.OnInitialized();
        cellWidth = Width/GameState.Cols;
    }
    public void Action(Cell obj){
        ActionMethod?.Invoke(obj);
    }
}