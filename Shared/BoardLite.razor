@inject DataStore DataStore
@implements IDisposable

<div class="board">
    <div class="row">
        <div class="col-md-6 small">
            @Game.GameId
        </div>
        <div class="col-md-6 small">
            @Game.BoardId
        </div>
    </div>
    <div class="row">
        <div class="col-md-9">
            <BoardView Width="@Width" Height="@Height" ActionMethod="Action" GameState="@Game.GameState"></BoardView>
        </div>
        <div class="col-md-3">
            <h3>Undo Stack</h3>
             @foreach(var state in Game.undoStack){
                 var gameState = GameState.DeSerialize(state);
                 <BoardView Width="100" Height="100" ActionMethod="Action" GameState="@gameState"></BoardView>
             }   


            <h3>Redo Stack</h3>
             @foreach(var state in Game.redoStack){
                 var gameState = GameState.DeSerialize(state);
                 <BoardView Width="100" Height="100" ActionMethod="Action" GameState="@gameState"></BoardView>
             }   
        </div>
    </div>
    
</div>
@code{
    [Parameter] public int Width{get;set;}=500;
    [Parameter] public int Height{get;set;}=500;
    [Parameter] public int Rows{get;set;}=10;
    [Parameter] public int Cols{get;set;}=10;
    [Parameter] public int Colors{get;set;}=5;
    [Parameter] public Game Game{get;set;}
    int cellWidth = 0;

    protected override void OnInitialized() {
        base.OnInitialized();
        cellWidth = Width/Cols;
        Game.GameStateChanged+=OnGameStateChanged;
    }

    private  async void OnGameStateChanged(object sender, EventArgs args){
        await InvokeAsync(()=>{
            DataStore.GlobalStore[Game.GameId] = Game.GameState;
            StateHasChanged();
        });
    }

    public void Dispose(){
        Console.WriteLine("Disposing of Game Event");
        Game.GameStateChanged-=OnGameStateChanged;
    }

    private void Action(Cell cell){
        Game.Action(cell);
    }

}